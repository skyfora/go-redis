// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Logging is an autogenerated mock type for the Logging type
type Logging struct {
	mock.Mock
}

type Logging_Expecter struct {
	mock *mock.Mock
}

func (_m *Logging) EXPECT() *Logging_Expecter {
	return &Logging_Expecter{mock: &_m.Mock}
}

// Printf provides a mock function with given fields: ctx, format, v
func (_m *Logging) Printf(ctx context.Context, format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logging_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type Logging_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - v ...interface{}
func (_e *Logging_Expecter) Printf(ctx interface{}, format interface{}, v ...interface{}) *Logging_Printf_Call {
	return &Logging_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{ctx, format}, v...)...)}
}

func (_c *Logging_Printf_Call) Run(run func(ctx context.Context, format string, v ...interface{})) *Logging_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logging_Printf_Call) Return() *Logging_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logging_Printf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logging_Printf_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogging creates a new instance of Logging. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogging(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logging {
	mock := &Logging{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
